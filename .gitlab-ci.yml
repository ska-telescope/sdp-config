variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH

stages:
  - test
  - lint
  - build
  - publish

image: python:latest

# ============================================================================
# Test and lint Python package
# ============================================================================

test:
  stage: test
  services:
    - name: quay.io/coreos/etcd:latest
      alias: etcd
      command:
        - /usr/local/bin/etcd
        - "--advertise-client-urls=http://0.0.0.0:2379"
        - "--listen-client-urls=http://0.0.0.0:2379"
        - "--initial-advertise-peer-urls=http://0.0.0.0:2380"
        - "--listen-peer-urls=http://0.0.0.0:2380"
        - "--initial-cluster=default=http://0.0.0.0:2380"
  variables:
    SDP_TEST_HOST: etcd
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - python3 setup.py test
  after_script:
    - mkdir -p build/reports
    - mv code-coverage.xml unit-tests.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

# This is meant to mimick relatively closely what readthedocs would do
# - to verify that it will work correctly
docs:
  stage: test
  before_script:
  - python -m pip install --exists-action=w --no-cache-dir -r docs/requirements.txt
  script:
  - (cd docs/src; sphinx-build -T -E -d _build/doctrees-readthedocs -D language=en . _build/html -W)
  artifacts:
    paths:
    - docs/src/_build
    expire_in: 1 week

lint:
  stage: lint
  dependencies:
    - test
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - pylint --exit-zero --output-format=parseable src/ska_sdp_config
    - pylint --exit-zero --output-format=pylint2junit.JunitReporter src/ska_sdp_config > linting.xml
  after_script:
    - mkdir -p build/reports
    - mv linting.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

# ============================================================================
# Build Python package
# ============================================================================

.build_python:
  stage: build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Executed on a non-master commit

build_dev:
  extends: .build_python
  except: [master]
  script:
    - python3 setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel

# Executed on a master commit

build_release:
  extends: .build_python
  only: [master]
  script:
    - python3 setup.py sdist bdist_wheel

# ============================================================================
# Publish Python package (tags only)
# ============================================================================

publish to nexus:
  stage: publish
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  tags: [docker]
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    - grep "version" src/ska_sdp_config/version.py | grep -q $CI_COMMIT_TAG
    - pip3 install setuptools twine
    - python3 setup.py egg_info sdist bdist_wheel
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    variables:
       - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
       - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ # Confirm semantic versioning of tag

# ============================================================================
# CI metrics
# ============================================================================

create_ci_metrics:
  stage: .post
  when: always
  script:
    # Gitlab CI badges creation: START
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  artifacts:
    paths:
      - build
    expire_in: 1 week
